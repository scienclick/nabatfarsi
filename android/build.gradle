// Uncomment if you're not applying this plugin in the root build.gradle
// apply plugin: "com.android.application"

android {
    namespace "com.nabatfarsi"
//    buildToolsVersion '35.0.0'
    compileSdkVersion 34

    buildFeatures {
        buildConfig true
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        androidTest.setRoot('tests')
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/robovm/ios/robovm.xml']
        }
    }


    defaultConfig {
        targetSdkVersion 34
        versionCode 35
        versionName "3.5"
        buildConfigField 'String', 'NABAT_PRODUCT_PREMIUM', '"nabatfarsi4mykids"'
        minSdkVersion  21
    }

    apply from: "./buildTypes.gradle", to: android
    apply plugin: 'kotlin-android'

    buildTypes {
        release {
            signingConfig signingConfigs.releaseconfig
            debuggable false
            minifyEnabled true
        }
        debug {
            debuggable true
        }
    }
}
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs()
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar"))      outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86_64.jar"))       outputDir = file("libs/x86_64")
        if (jar.name.endsWith("natives-x86.jar"))          outputDir = file("libs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        path = sdkDir ?: System.env.ANDROID_HOME
    } else {
        path = System.env.ANDROID_HOME
    }

    def adb = "${path}/platform-tools/adb"
    commandLine adb, 'shell', 'am', 'start', '-n', 'com.nabatfarsi/.AndroidLauncher'
}

eclipse {
    sourceSets {
        main {
            java.srcDirs "src", "gen"
        }
    }

    jdt {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    classpath {
        // ✅ FIX: Use compileClasspath instead of implementation (which is not resolvable)
        plusConfigurations += [project.configurations.compileClasspath]
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear()
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

idea {
    module {
        sourceDirs += file("src")
        // ✅ FIX: Use compileClasspath instead of implementation
        scopes = [
                COMPILE: [plus: [project.configurations.compileClasspath]]
        ]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance()
                builder.current = node
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}


dependencies {
    implementation 'com.anjlab.android.iab.v3:library:1.0.44'

    implementation project(":core")
    implementation "com.badlogicgames.gdx:gdx:1.12.0"
    implementation "com.badlogicgames.gdx:gdx-backend-android:1.12.0"


    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"
}
